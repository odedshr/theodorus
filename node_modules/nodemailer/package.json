{
  "name": "nodemailer",
  "description": "Easy to use module to send e-mails, supports unicode and SSL/TLS",
  "version": "0.3.1",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "homepage": "http://github.com/andris9/nodemailer",
  "repository": {
    "type": "git",
    "url": "http://github.com/andris9/nodemailer.git"
  },
  "scripts": {
    "test": "node ./run_tests.js"
  },
  "main": "./lib/nodemailer",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/andris9/nodemailer/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "mailcomposer": "*",
    "simplesmtp": "*"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "engine": {
    "node": ">=0.5"
  },
  "keywords": [
    "e-mail",
    "mime",
    "email",
    "sendmail",
    "ses"
  ],
  "readme": "Nodemailer\n==========\n\n**Nodemailer** is an easy to use module to send e-mails with Node.JS (using \nSMTP or sendmail) and is unicode friendly - You can use any characters you like ✔\n\nThis version of Nodemailer is built from scratch and might break some existing scripts, so beware while upgrading.\n\n[Autogenerated docs](http://www.node.ee/maildoc/)\n\nUse [DocumentUp](http://documentup.com/andris9/nodemailer/) to read this README\nin a more structured way (with TOC).\n\n[![Build Status](https://secure.travis-ci.org/andris9/Nodemailer.png)](http://travis-ci.org/andris9/Nodemailer)\n\n## Nodemailer supports\n\n  * **Unicode** to use any characters\n  * **HTML content** as well as **plain text** alternative\n  * **Attachments** (including attachment **streaming** for sending larger files)\n  * **Embedded images** in HTML\n  * **SSL/STARTTLS** for secure e-mail delivery\n  * Different transport methods - **SMTP**, **sendmail** and **Amazon SES**\n  * SMTP **Connection pool** and connection reuse for rapid delivery\n  * **Preconfigured** services for using SMTP with Gmail, Hotmail etc.\n\n## Check out my other mail related modules\n\nIf you want to parse generated or received e-mail instead of sending it, check \nout [MailParser](https://github.com/andris9/mailparser).\n\nIf you only want to generate the raw e-mail stream, check out \n[MailComposer](https://github.com/andris9/mailcomposer).\n\nIf you only want to communicate with the SMTP (both as client and the server),\ncheck out [simplesmtp](https://github.com/andris9/simplesmtp).\n\n## Example\n\nThis is a complete example to send an e-mail with plaintext and HTML body\n\n    var nodemailer = require(\"nodemailer\");\n    \n    var transport = nodemailer.createTransport(\"SMTP\",{\n        service: \"Gmail\",\n        auth: {\n            user: \"gmail.user@gmail.com\",\n            pass: \"userpass\"\n        }\n    });\n    \n    var mailOptions = {\n        transport: transport, // transport method to use\n        from: \"Sender Name <sender@example.com>\", // sender address\n        to: \"receiver1@example.com, receiver2@example.com\", // list of receivers\n        subject: \"Hello!\", // Subject line\n        text: \"Hello world!\", // plaintext body\n        html: \"<b>Hello world!</b>\" // html body\n    }\n\n    nodemailer.sendMail(mailOptions, function(error){\n        if(error){\n            console.log(error);\n        }else{\n            console.log(\"Message sent!\");\n        }\n        transport.close(); // lets shut down the connection pool\n    });\n\nSee also the [examples folder](https://github.com/andris9/Nodemailer/tree/master/examples) \nfor full featured examples\n\n## Installation\n\nInstall through NPM\n\n    npm install nodemailer\n\n## Usage\n\nInclude the module\n\n    var nodemailer = require(\"nodemailer\");\n\nAn e-mail can be sent with `sendMail(mailOptions, callback)` command\n\n    nodemailer.send_mail(mailOptions, callback);\n\nWhere\n\n  * **mailOptions** defines the e-mail (set its subject, body text, receivers etc.), see **E-mail Message Fields** for details\n  * **callback** is the callback function that will be run after the e-mail is sent or the sending failed (see **Return callback** for details)\n\n## Setting up a transport method\n\nBefore you can send any e-mails you need to set up a transport method. This can\nbe done with `nodemailer.createTransport(type, options)` where `type` indicates\nthe transport protocol and `options` defines how it used.\n\n    var transport = nodemailer.createTransport(\"SMTP\", {smtp_options});\n\nThe same transport object can and should be reused several times.\n\nWhen the transport method is defined, it should be attached to the message\nobject as `transport`\n\n    var transport = nodemailer.createTransport(\"SMTP\", {smtp_options});\n\n    var mailOptions = {\n        transport: transport,\n        from: \"sender@tr.ee\",\n        to: \"receiver@tr.ee\"\n        ...\n    };\n\n### Possible transport methods\n\nRequired `type` parameter can be one of the following:\n\n  * **SMTP** for using SMTP\n  * **SES** for using Amazon SES\n  * **Sendmail** for utilizing systems *sendmail* command\n\n### Setting up SMTP\n\nSMTP is different from the other transport mechanisms, as in its case a connection\npool is created. All the connections try to stay alive as long as possible and \nare reusable to minimize the protocol overhead delay - for example setting up\nTLS for authenticating is relatively lengthy process (in CPU terms, not by human\nterms), you do not want to do it several times.\n\nPossible SMTP options are the following:\n\n * **service** - an optional well known service identifier (\"Gmail\", \"Hotmail\" etc., see **Well known Services** for a list of supported services) to auto-configure host, port and secure connection settings\n * **host** - hostname of the SMTP server (defaults to \"localhost\", not needed with `service`)\n * **port** - port of the SMTP server (defaults to 25, not needed with `service`)\n * **secureConnection** - use SSL (default is `false`, not needed with `service`)\n * **name** - the name of the client server (defaults to machine name)\n * **auth** - authentication object as `{user:\"...\", pass:\"...\"}`\n * **ignoreTLS** - ignore server support for STARTTLS (defaults to `false`)\n * **debug** - output client and server messages to console\n * **maxConnections** - how many connections to keep in the pool (defaults to 5)\n\nExample:\n\n    var transport = nodemailer.createTransport(\"SMTP\", {\n        service: \"Gmail\",\n        auth: {\n            user: \"gmail.user@gmail.com\",\n            pass: \"userpass\"\n        }\n    });\n\nor the same without `service` parameter\n\n    var transport = nodemailer.createTransport(\"SMTP\", {\n        host: \"smtp.gmail.com\", // hostname\n        secureConnection: true, // use SSL\n        port: 465, // port for secure SMTP\n        auth: {\n            user: \"gmail.user@gmail.com\",\n            pass: \"userpass\"\n        }\n    });\n\n**NB!** if you want to close the pool (cancel all open connections) you can use\n`transport.close()`\n\n    var transport = nodemailer.createTransport(\"SMTP\",{});\n    ...\n    transport.close(); // close the pool \n\n### Setting up SES\n\nSES is actually a HTTP based protocol, the compiled e-mail and related info \n(signatures and such) are sent as a HTTP request to SES servers.\n\nPossible SES options are the following:\n\n * **AWSAccessKeyID** - AWS access key (required)\n * **AWSSecretKey** - AWS secret (required)\n * **ServiceUrl** - optional API end point URL (defaults to *\"https://email.us-east-1.amazonaws.com\"*)\n\nExample:\n\n    var transport = nodemailer.createTransport(\"SES\", {\n        AWSAccessKeyID: \"AWSACCESSKEY\",\n        AWSSecretKey: \"AWS/Secret/key\"\n    });\n\n### Setting up Sendmail\n\nSendmail transport method streams the compiled message to the *stdin* of *sendmail*\ncommand.\n\nConfiguration is really easy, the options parameter is optional but you can\nuse it to define the path to the *sendmail* command\n\n    var transport = nodemailer.createTransport(\"Sendmail\", \"/usr/bin/sendmail\");\n\n### Well known services for SMTP\n\nIf you want to use a well known service as the SMTP host, you do not need\nto enter the hostname or port number, just use the `service` parameter.\n\nCurrently cupported services are: \n\n  * **\"Gmail\"** for Google Mail\n  * **\"hot.ee\"** for www.hot.ee\n  * **\"Hotmail\"** for Microsoft Live Hotmail\n  * **\"iCloud\"** for Apple iCloud\n  * **\"mail.ee\"** for www.mail.ee\n  * **\"Postmark\"** for Postmark App\n  * **\"SendGrid\"** for SendGrid\n  * **\"SES\"** for Amazon SES\n  * **\"Yahoo\"** for Yahoo Mail\n  * **\"Zoho\"** for Zoho Mail\n\nPredefined service data covers `host`, `port` and secure connection settings, \nany other parameters (ie. `auth`) need to be set separately.\n\n## E-mail message fields\n\nThe following are the possible fields of an e-mail message:\n\n  - **from** - The e-mail address of the sender. All e-mail addresses can be plain `sender@server.com` or formatted `Sender Name <sender@server.com>`\n  - **to** - Comma separated list of recipients e-mail addresses that will appear on the `To:` field\n  - **cc** - Comma separated list of recipients e-mail addresses that will appear on the `Cc:` field\n  - **bcc** - Comma separated list of recipients e-mail addresses that will appear on the `Bcc:` field\n  - **replyTo** - An e-mail address that will appear on the `Reply-To:` field\n  - **subject** - The subject of the e-mail\n  - **text** - The plaintext version of the message\n  - **html** - The HTML version of the message\n  - **headers** - An object of additional header fields `{\"X-Key-Name\": \"key value\"}` (NB! values as passed as is, you should do your own encoding to 7bit if needed)\n  - **attachments** - An array of attachment objects.\n\nAll text fields (e-mail addresses, plaintext body, html body) use UTF-8 as the encoding.\nAttachments are streamed as binary.\n\nExample:\n\n    var transport = nodemailer.createTransport(\"Sendmail\");\n\n    var mailOptions = {\n        transport: transport,\n        from: \"me@tr.ee\",\n        to: \"me@tr.ee\",\n        subject: \"Hello world!\",\n        text: \"Plaintext body\"\n    }\n    \n    nodemailer.sendMail(mailOptions, function(){});\n\n### Attachment fields\n\nAttahcment object consists of the following properties:\n\n  * **fileName** - filename to be reported as the name of the attached file, use of unicode is allowed (except when using Amazon SES which doesn't like it)\n  * **cid** - optional content id for using inline images in HTML message source\n  * **contents** - String or a Buffer contents for the attachment\n  * **filePath** - path to a file if you want to stream the file instead of including it (better for larger attachments)\n  * **contentType** - optional content type for the attachment, if not set will be derived from the `fileName` property \n\nOne of `contents` or `filePath` must be specified, if both are missing, the attachment\nwill be discarded. Other fields are optional.\n\nAttachments can be added as many as you want.\n\n    var mailOptions = {\n        ...\n        attachments: [\n            {\n                fileName: \"text1.txt\",\n                contents: \"hello world!\n            },\n            {\n                fileName: \"text2.txt\",\n                contents: new Buffer(\"hello world!,\"utf-8\")\n            },\n            {\n                fileName: \"text3.txt\",\n                filePath: \"/path/to/file.txt\" // stream this file\n            },\n            {\n                fileName: \"text\",\n                contents: \"hello world!,\n                contentType: \"text/plain\"\n            }\n        ]\n    }\n\n### Address Formatting\n\nAll the e-mail addresses can be plain e-mail address\n\n    username@example.com\n\nor with formatted name (includes unicode support)\n\n    \"Ноде Майлер\" <username@example.com>\n\nTo, Cc and Bcc fields accept comma separated list of e-mails. Formatting can be mixed.\n\n    username@example.com, \"Ноде Майлер\" <username@example.com>, \"Name, User\" <username@example.com>\n\nYou can even use unicode domain and user names, these are automatically converted\nto the supported form\n\n    \"Uncode Domain\" <info@müriaad-polüteism.info>\n\n### Using Embedded Images\n\nAttachments can be used as embedded images in the HTML body. To use this\nfeature, you need to set additional property of the attachment - `cid` (unique\nidentifier of the file) which is a reference to the attachment file. The same\n`cid` value must be used as the image URL in HTML (using `cid:` as the URL\nprotocol, see example below).\n\n**NB!** the cid value should be as unique as possible!\n\n    var mailOptions = {\n        ...\n        html: \"Embedded image: <img src='cid:unique@node.ee' />\",\n        attachments: [{\n            filename: \"image.png\",\n            filePath: \"/path/to/file\",\n            cid: \"unique@node.ee\" //same cid value as in the html img src\n        }]\n    }\n\n## Return callback\n\nReturn callback gets two parameters\n\n  * **error** - an error object if the message failed\n  * **responseStatus** - an object with some information about the status on success\n\nExample:\n\n    nodemailer.sendMail(mailOptions, function(error, responseStatus){\n        if(!error){\n            console.log(responseStatus.message); // response from the server\n        }\n    });\n\n## Tests\n\nRun the tests with npm in Nodemailer's directory\n\n    npm test\n\nThere aren't currently many tests for Nodemailer but there are a lot of tests\nin the modules that are used to generate the raw e-mail body and to use the \nSMTP client connection.\n\n## Tweaking \n\nNodemailer in itself is actually more like a wrapper for my other modules\n[mailcomposer](https://github.com/andris9/mailcomposer) for composing the raw message stream\nand [simplesmtp](https://github.com/andris9/simplesmtp) for delivering it, by providing an \nunified API. If there's some problems with particular parts of the \nmessage composing/sending process you should look at the  appropriate module.\n\n## License\n\n**Nodemailer** is licensed under [MIT license](https://github.com/andris9/Nodemailer/blob/master/LICENSE). Basically you can do whatever you want to with it.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andris9/nodemailer/issues"
  },
  "_id": "nodemailer@0.3.1",
  "dist": {
    "shasum": "ed77e543d09975721cab495565b1af42c10152ef"
  },
  "_from": "nodemailer@0.3.1",
  "_resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-0.3.1.tgz"
}
